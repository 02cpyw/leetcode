// class Solution {
//     public int numTrees(int n) {
//         int[] dp = new int[n + 1];
//         dp[0] = 1;
//         dp[1] = 1;
//         for(int i = 2; i <= n; i++) {
//             for(int j = 1; j <= i; j++) {
//                 dp[i] += dp[j-1] * dp[i-j];
//             }
//         }
//         return dp[n];
//     }
// }

/**
    f(i,n)表示，以i结点为root，序列长度为n的二叉搜索树的种数
    dp[n]表示序列长度为n的二叉搜索树的种数
    则dp[n] = f(1,n)+f(2,n)+......f(n,n)
    而f(i,n) = dp[i-1]*dp[n-i]  (左子树种类 * 右子树种类)
    则： dp[n] = dp[0]*dp[n-1]+dp[1]*dp[n-2]+...dp[n-1]*dp[0]
    初始化：dp[0] = 1;
           dp[1] = 1;
           dp[2] = dp[0]*dp[1] + dp[1]*dp[0]
           dp[3] = dp[0]*dp[2] + dp[1]*dp[1] + dp[2]*dp[0]
 */
class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2; i <= n; i++) {
            for(int j = 1; j <= i; j++) {
                dp[i] += dp[j-1]*dp[i-j];
            }
        }
        return dp[n];
    }
}
