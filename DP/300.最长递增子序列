
/**
    方法一：动态规划  O(n^2)
 */

// class Solution {
//     public int lengthOfLIS(int[] nums) {
//         int len = nums.length;
//         int[] dp = new int[len];
//         int res = 1;
//         Arrays.fill(dp,1);
//         for(int i = 1; i < len; i++) {
//             for(int j = 0; j < i; j++) {
//                 if(nums[i] > nums[j]) {
//                     dp[i] = Math.max(dp[i],dp[j] + 1);
//                 }
//             }
//             res = Math.max(res,dp[i]);
//         }
//         return res;
//     }
// }


/**
    方法二：动态规划 + 二分  O(n*logn)
    此方法不仅能得出长度，还能得出最长递增子序列的答案之一
 */
class Solution {
    public int lengthOfLIS(int[] nums) {
        int reslen = -1;
        int[] sequence = new int[nums.length];
        for(int e : nums) {
            int left = 0, right = reslen;
            while(left <= right) {
                int mid = (left + right) >> 1;
                if(e > sequence[mid]) left = mid + 1;
                else right = mid - 1;
            }
            sequence[left] = e;
            if(right == reslen) reslen++;
        }
        return reslen+1;
    }
}
